name: CRM Social Extension CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  ODOO_VERSION: "18.0"
  PYTHON_VERSION: "3.11"

jobs:
  lint:
    name: Code Quality & Linting
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 pylint black isort

      - name: Run Black formatter check
        run: black --check --diff .

      - name: Run isort import sorting check
        run: isort --check-only --diff .

      - name: Run flake8 linting
        run: flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics

      - name: Run pylint
        run: pylint **/*.py --disable=C,R,W --errors-only

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: lint
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: odoo
          POSTGRES_USER: odoo
          POSTGRES_DB: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            python3-dev \
            libxml2-dev \
            libxslt1-dev \
            libldap2-dev \
            libsasl2-dev \
            libtiff5-dev \
            libjpeg8-dev \
            libopenjp2-7-dev \
            zlib1g-dev \
            libfreetype6-dev \
            liblcms2-dev \
            libwebp-dev \
            libharfbuzz-dev \
            libfribidi-dev \
            libxcb1-dev \
            libpq-dev \
            wkhtmltopdf

      - name: Cache Odoo
        uses: actions/cache@v3
        with:
          path: odoo
          key: odoo-${{ env.ODOO_VERSION }}-${{ hashFiles('**/requirements.txt') }}

      - name: Download Odoo
        run: |
          if [ ! -d "odoo" ]; then
            wget -q https://github.com/odoo/odoo/archive/${{ env.ODOO_VERSION }}.tar.gz
            tar -xzf ${{ env.ODOO_VERSION }}.tar.gz
            mv odoo-${{ env.ODOO_VERSION }} odoo
          fi

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r odoo/requirements.txt
          pip install coverage

      - name: Create Odoo config
        run: |
          cat > odoo.conf << EOF
          [options]
          admin_passwd = admin
          db_host = localhost
          db_port = 5432
          db_user = odoo
          db_password = odoo
          addons_path = odoo/addons,./
          xmlrpc_port = 8069
          longpolling_port = 8072
          workers = 0
          EOF

      - name: Install module
        run: |
          python odoo/odoo-bin -c odoo.conf -i crm_social_extension --stop-after-init --log-level=warn

      - name: Run Python tests with coverage
        run: |
          coverage run --source=./crm_social_extension odoo/odoo-bin -c odoo.conf -i crm_social_extension --test-enable --stop-after-init --log-level=test
          coverage xml
          coverage report

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: python-tests
          name: python-coverage

  javascript-tests:
    name: JavaScript Tests
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            python3-dev \
            libxml2-dev \
            libxslt1-dev \
            libpq-dev \
            wkhtmltopdf

      - name: Download and setup Odoo
        run: |
          wget -q https://github.com/odoo/odoo/archive/${{ env.ODOO_VERSION }}.tar.gz
          tar -xzf ${{ env.ODOO_VERSION }}.tar.gz
          mv odoo-${{ env.ODOO_VERSION }} odoo
          pip install -r odoo/requirements.txt

      - name: Create test database
        run: |
          sudo -u postgres createdb test_crm_social
          cat > odoo.conf << EOF
          [options]
          admin_passwd = admin
          db_host = localhost
          db_port = 5432
          db_user = postgres
          addons_path = odoo/addons,./
          xmlrpc_port = 8069
          EOF

      - name: Run QUnit tests
        run: |
          python odoo/odoo-bin -c odoo.conf -d test_crm_social -i crm_social_extension --test-enable --stop-after-init

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Bandit security scan
        uses: securecodewarrior/github-action-bandit@v1
        with:
          config_file: .bandit

      - name: Run Safety check
        run: |
          pip install safety
          safety check

  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    needs: [test, javascript-tests]
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Create Dockerfile
        run: |
          cat > Dockerfile << EOF
          FROM odoo:${{ env.ODOO_VERSION }}
          
          USER root
          COPY requirements.txt /tmp/
          RUN pip3 install -r /tmp/requirements.txt
          
          USER odoo
          COPY . /mnt/extra-addons/crm_social_extension/
          EOF

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: crm-social-extension:test

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [test, javascript-tests, security-scan]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment..."
          # Add your staging deployment commands here

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [test, javascript-tests, security-scan]
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.run_number }}
          release_name: Release v${{ github.run_number }}
          draft: false
          prerelease: false

      - name: Deploy to production
        run: |
          echo "Deploying to production environment..."
          # Add your production deployment commands here

  notify:
    name: Notification
    runs-on: ubuntu-latest
    needs: [test, javascript-tests, security-scan]
    if: always()
    steps:
      - name: Notify on success
        if: ${{ needs.test.result == 'success' && needs.javascript-tests.result == 'success' && needs.security-scan.result == 'success' }}
        run: |
          echo "✅ All tests passed successfully!"

      - name: Notify on failure
        if: ${{ needs.test.result == 'failure' || needs.javascript-tests.result == 'failure' || needs.security-scan.result == 'failure' }}
        run: |
          echo "❌ Some tests failed. Please check the logs."
          exit 1